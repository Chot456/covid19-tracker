{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65e8fc3c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\r\nimport \"./InfoBox.css\";\r\n\r\n//rfce automatic react template\r\n// install es7 extention\r\n\r\nfunction InfoBox({title, cases, isRed, active, total, ...props }) {\r\n    \r\n    return (\r\n        <Card \r\n            onClick={props.onClick} \r\n            className={`infoBox ${active && 'infoBox--selected'} ${active && 'infoBox--red'}`}\r\n            >\r\n            <CardContent>\r\n                {/** Title i.e coronavirus cases */}\r\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">{title}</Typography>\r\n                \r\n                {/** +120 Number of cases  */}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox_cases--green\"}`}>{cases}</h2>\r\n\r\n                {/** 1.2M total */}\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\"\r\nimport { Circle, Popup } from \"react-leaflet\"\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\n// Draw circles on the map with interactive tooltop\r\nexport const showDataOnMap = (data, casesType='cases') => (\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n\r\n            // calculating circle sizes\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div>\r\n                    <div\r\n                        className=\"info-flag\" \r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);\r\n\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"0\";\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './util';\r\n\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='$copy; <a href=\"http://osm.org.copyright\">OpenStreet</a>'\r\n                />\r\n\r\n                {/** Loop through the countries and draw circles on the screen */}\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td> { country } </td>\r\n                    <td><strong> { numeral(cases).format('0,0')  } </strong></td>\r\n                </tr>\r\n            ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, {useState, useEffect} from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\n\r\n// This option is from documentation for setting up the line graph\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0.0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ]\r\n    }\r\n}\r\n\r\nfunction LineGraph({casesType}) {\r\n    const [data, setData] = useState({});\r\n\r\n\r\n    // chart data - get the data number differece from lastData point up to present date\r\n    const buildChartData = (data, casesType) => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n        for(let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                let newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint,\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        };\r\n        return chartData;\r\n    };\r\n\r\n    // fetch all data from API for the last 120 days\r\n    // https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n           await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n            });\r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                    datasets: [{\r\n                        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                        borderColor: \"#CC1034\",\r\n                        data: data\r\n                    }]\r\n                }}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\"\n\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\"\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n \n  // STATE = How to write a variable in REACT\n\n  // https://disease.sh/v3/covid-19/countries\n\n  // USEEFFECT = onload will run the code\n  useEffect(() =>{\n\tfetch(\"https://disease.sh/v3/covid-19/all\")\n\t.then(response => response.json())\n\t.then(data => {\n\t\tsetCountryInfo(data);\n\t})\n  },[]);\n\n  // onload get countries data from API\n  useEffect(() => {\n      // async -> send a request , wait for it, to do something with it\n\t  // get countries from API\n      const getCountriesData = async () => {\n        await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n              name: country.country, //United states\n              value: country.countryInfo.iso2  // UK, USA, FR\n            }));\n\t\t\t\n\t\t\t// sort the country data start from highest\n\t\t\tconst sortedData = sortData(data);\n\t\t\t\n\t\t\t// set data in country table\n\t\t\tsetTableData(sortedData);\n\n\t\t\t// set countries data in map\n\t\t\tsetMapCountries(data);\n\n\t\t\t// set county\n            setCountries(countries);\n        });\n      };\n\n      getCountriesData();\n  }, []);\n\n  //Function for changing Select menu\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\tsetCountry(countryCode)\n\t\n\t// https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n\tconst url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n\tawait fetch(url)\n\t.then(response => response.json())\n\t.then(data=> {\n\n\t\t// for setting up the country code\n\t\tsetCountry(countryCode);\n\t\t\n\t\t// All of the data from the country response\n\t\tsetCountryInfo(data);\n\n\t\t// set the map location lattitude and longtitude\n\t\tsetMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\n\t\t// for map zoom in\n\t\tsetMapZoom(4);\n\t});\n  };\n\n  return (\n    <div className=\"app\">\n\t\t<div className=\"app__left\">\n\t\t\t<div className=\"app__header\">\n\t\t\t\t<h1>COVID-19 TRACKER</h1>\n\t\t\t\t<FormControl className=\"app__dropdown\">\n\t\t\t\t\t<Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n\t\t\t\t\t\t<MenuItem value=\"worldwide\">Worldwide</MenuItem>   \n\t\t\t\t\t\t{\n\t\t\t\t\t\tcountries.map((country) =>(\n\t\t\t\t\t\t\t<MenuItem value={country.value}>{country.name}</MenuItem>    \n\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t\t</Select> \n\t\t\t\t</FormControl>\n\t\t\t</div>\n\t\t\n\t\t\t<div className=\"app__stats\">\n\t\t\t\t<InfoBox \n\t\t\t\t\tisRed\n\t\t\t\t\tactive={casesType === 'cases'}\n\t\t\t\t\tonClick={(e) => setCasesType('cases')}\n\t\t\t\t\ttitle=\"Coronavirus Cases\" \n\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayCases)} \n\t\t\t\t\ttotal={prettyPrintStat(countryInfo.cases)} \n\t\t\t\t\t/>\n\n\t\t\t\t<InfoBox \n\t\t\t\t\tactive={casesType === 'recovered'}\n\t\t\t\t\tonClick={(e) => setCasesType('recovered')}\n\t\t\t\t\ttitle=\"Recovered\" \n\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayRecovered)} \n\t\t\t\t\ttotal={prettyPrintStat(countryInfo.todayRecovered)} \n\t\t\t\t\t/>\n\n\t\t\t\t<InfoBox\n\t\t\t\t\tisRed\n\t\t\t\t\tactive={casesType === 'deaths'}\n\t\t\t\t\tonClick={(e) => setCasesType('deaths')}\n\t\t\t\t\ttitle=\"Deaths\" \n\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayDeaths)} \n\t\t\t\t\ttotal={prettyPrintStat(countryInfo.todayDeaths)} \n\t\t\t\t\t/>\n\t\t\t</div> \n\n\t\t\t<Map\n\t\t\t\tcasesType={casesType}\n\t\t\t\tcountries={mapCountries}\n\t\t\t\tcenter={mapCenter}\n\t\t\t\tzoom={mapZoom}\n\t\t\t/>\n\n\t\t</div>\n\t\t<div className=\"app__right\">\n\t\t\t<Card>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>Live Cases by Country</h3>\n\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t\t<Card className=\"mt-8\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>World new {casesType}</h3>\n\t\t\t\t\t<LineGraph casesType={casesType}></LineGraph>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}