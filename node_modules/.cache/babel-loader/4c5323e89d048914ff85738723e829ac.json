{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chot\\\\Desktop\\\\covid_tracker\\\\covid-19-tracker\\\\src\\\\LineGraph.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst options = {\n  Legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem) {\n        return numeral(tooltipItem.value).format(\"+0.0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // Include a dollar sign in the ticks\n        callback: function () {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nfunction LineGraph() {\n  const [data, setData] = useState({}); // https://disease.sh/v3/covid-19/historical/all?lastdays=120\n\n  const buildChartData = (data, casesType = 'cases') => {\n    const chartData = [];\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint\n        };\n        chartData.push(newDataPoint);\n      }\n\n      lastDataPoint = data[casesType][date];\n    }\n\n    ;\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(response => response.json()).then(data => {\n        const chartData = buildChartData(data);\n        setData(chartData);\n      });\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"I'm graph\"), (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/React.createElement(Line, {\n    options: options,\n    data: {\n      datasets: [{\n        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n        borderColor: \"#CC1034\",\n        data: data\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }));\n}\n\nexport default LineGraph;","map":{"version":3,"sources":["C:/Users/chot/Desktop/covid_tracker/covid-19-tracker/src/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","Legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","LineGraph","data","setData","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    Legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem) {\r\n                return numeral(tooltipItem.value).format(\"+0.0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function () {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ]\r\n    }\r\n}\r\n\r\nfunction LineGraph() {\r\n    const [data, setData] = useState({});\r\n\r\n    // https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n\r\n    const buildChartData = (data, casesType = 'cases') => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n        for(let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                let newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint,\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        };\r\n        return chartData;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n           await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const chartData = buildChartData(data);\r\n                setData(chartData);\r\n            });\r\n        }\r\n\r\n        fetchData();\r\n        \r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>I'm graph</h1>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                    datasets: [{\r\n                        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                        borderColor: \"#CC1034\",\r\n                        data: data\r\n                    }]\r\n                }}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n"]},"metadata":{},"sourceType":"module"}